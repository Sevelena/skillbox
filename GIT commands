* У коммита есть хэш - уникальный номер
* коммит - набор изменений в файлах и папках проекта, который сохранен в репозиторий под определенным именем. У коммита есть хэш - его идентификатор, дата, время, автор, коммент.


#НАСТРОЙКА
git --version
git config --global user.name "Sevelena"
git config --global user.email "sevelena11@gmail.com"
git config --list


#Клонирование проекта
git clone http://...

cd /папка проеката
git status - есть ли в папке проекта несохраненные изменения

#ДОБАВИТЬ внесенные изменения В РЕПОИЗИТОРИЙ (Git)
git add. - добавить ВСЕ изменения в текущей папке
git add <file>
git commit -m 'Комментарий, что изменялось'
 
#ДОБАВЛЕНИЕ ИЗМЕНЕНИЙ НА СЕРВЕР
git push -u origin master

#ИНИЦИАЛИЗИРОВАТЬ git-репозиторий в какой либо папке, перейдя в неё. После инициализации папки проекта в ней появляется специальная папка .git. В ней хранится вся история изменений.
git init

+
git status
git add .
git commit -m 'initial'

git show - показывает информацию о последнем коммите и его содержимом
q - выход из режима просмотра последнего коммита

git log - вся история коммитов
_____________________________________________________________________________________________________________
Файлы в папке, в кот. находится git репозиторий могут находиться в трех состояниях.
В коммит можно добавлять НЕ все измения, а только их часть

git status
1) Закоммичен (commited) ---> git commit -m 'Комментарий, что изменялось'
2) Изменен (not staged)
3) Готов к коммиту (staged) - называется "Добавление в индекс" ---> git add <file>


Команда git status позволяет просмотреть состояние рабочей директории — перечень незакоммиченных изменений: добавленных в индекс, непроиндексированных, не отслеживаемых в Git.

Индекс в Git
- это специальная область, в кот. хранятся изменения файлов, готовые к коммиту. Т.е. готовые к добавлению в репозиторий из рабочей папки


_________________________________________________________________________________________________________________________________________
ИГНОРИРОВАНИЕ ИЗМЕНЕНИЙ
имена файлов должны хранится в специальном файле .gitignore (создается вручную)
В файл .gitignore можно записывать имена файлов используя маску, например
*.log --- игнорируем все файлы проекта с расширением .log
logs/ --- игнорировать папку logs


Какие файлы не следует сохранять в репозитории?
- логи
- пользовательские файлы (аватарки, загруженные файлы, контент и-нет магазина)
- служебные файлы среды разработки
- внешние библиотеки
- файлы локальной конфигурации (н. файлы с настройками локального окружения)
- файлы операционной системы
- слишком большие файлы, которые не содержат програмный код

ОТРИЦАНИЕ ПАТТЕРНА
Если какой-то файл в папке игнорировать не следует, а нужно отслеживать
Например:
logs/*.log  #/ Исключаем все файлы с расширением log, лежащие в папке log
!logs/sample.log - продолжаем отслеживать sample.log, "!" - отрицание игнорирования



_________________________________________________________________________________________________________________________________________
2.2 Удалённые и локальные репозитории
git remote -v --- посмотреть путь к локальному репозиторию
git remote add origin [path]
git - название программы
remote - указание программе, что сейчас будет операция с настройками удаленных репозиториев
add - добавление новой записи в настройки
origin - название удаленного репозитория по умолчанию. (англ. "Источник", "Начало")
git push -u origin master --- отправляет локальный репозиторий на сервер. Параметр "-u" автоматически устанавливает связль между локальным и удаленным репозиторием таким образом, чтобы в дальнейшем можно было вызывать git push без дополнительных параметров. При первом выполнении передается имя репозитория и имя ветки (origin master)
git remote remove origin [path] --- удалит путь к удаленному репозиторию
git remote add origin [path]



_________________________________________________________________________________________________________________________________________
2.7 Внесение изменений и их отправка
git status
git add .
git commit -m 'message'
git push



_________________________________________________________________________________________________________________________________________
2.9 Обновление локального репозитория
